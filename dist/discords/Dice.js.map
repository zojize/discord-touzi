{"version":3,"file":"Dice.js","sources":["../../src/dice-grammar/dice-grammar.js","../../src/kwargs-grammar/kwargs-grammar.js"],"sourcesContent":["// Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n\n\n    const sign = { \"+\": 1, \"-\": -1 };\n\n    function diceMultiplier(dice, m) {\n        switch (dice.type) {\n            case \"dice\":\n                return {\n                    ...dice,\n                    multiplier: m * (dice.multiplier ?? 1),\n                }\n            case \"repeat\":\n                return {\n                    ...dice,\n                    dice: diceMultiplier(dice.dice, m),\n                }\n            case \"group\":\n                return {\n                    ...dice,\n                    dice: dice.dice.map(d => diceMultiplier(d, m)),\n                }\n        }\n    }\n\n    function diceOffset(dice, o) {\n        switch (dice.type) {\n            case \"dice\":\n                return {\n                    ...dice,\n                    offset: o + (dice.offset ?? 0),\n                }\n            case \"repeat\":\n                return {\n                    ...dice,\n                    dice: diceOffset(dice.dice, o),\n                }\n            case \"group\":\n                return {\n                    ...dice,\n                    dice: dice.dice.map(d => diceOffset(d, o)),\n                }\n        }\n    }\n\n    function diceTimes(dice, t) {\n        switch (dice.type) {\n            case \"dice\":\n                return {\n                    ...dice,\n                    times: t * (dice.times ?? 1),\n                };\n            case \"repeat\":\n                return {\n                    ...dice,\n                    dice: diceTimes(dice.dice, t),\n                }\n            case \"group\":\n                return {\n                    ...dice,\n                    dice: dice.dice.map(d => diceTimes(d, t)),\n                }\n        }\n    }\n\n    function diceRepeat(dice, times) {\n        return {\n            type: \"repeat\",\n            times,\n            dice,\n        }\n    }\n\n    function diceGroup(head, tail) {\n        if (tail.length) return {\n            type: \"group\",\n            dice: [head].concat(tail),\n        }\n        return head;\n    }\n\n    function dice(sides) {\n        return {\n            type: \"dice\",\n            sides,\n        }\n    }\n\n\nfunction peg$subclass(child, parent) {\n  function C() { this.constructor = child; }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  var self = Error.call(this, message);\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n  }\n  self.expected = expected;\n  self.found = found;\n  self.location = location;\n  self.name = \"SyntaxError\";\n  return self;\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\nfunction peg$padEnd(str, targetLength, padString) {\n  padString = padString || \" \";\n  if (str.length > targetLength) { return str; }\n  targetLength -= str.length;\n  padString += padString.repeat(targetLength);\n  return str + padString.slice(0, targetLength);\n}\n\npeg$SyntaxError.prototype.format = function(sources) {\n  var str = \"Error: \" + this.message;\n  if (this.location) {\n    var src = null;\n    var k;\n    for (k = 0; k < sources.length; k++) {\n      if (sources[k].source === this.location.source) {\n        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n        break;\n      }\n    }\n    var s = this.location.start;\n    var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n    if (src) {\n      var e = this.location.end;\n      var filler = peg$padEnd(\"\", s.line.toString().length);\n      var line = src[s.line - 1];\n      var last = s.line === e.line ? e.column : line.length + 1;\n      str += \"\\n --> \" + loc + \"\\n\"\n          + filler + \" |\\n\"\n          + s.line + \" | \" + line + \"\\n\"\n          + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n          + peg$padEnd(\"\", last - s.column, \"^\");\n    } else {\n      str += \"\\n at \" + loc;\n    }\n  }\n  return str;\n};\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n\n    class: function(expectation) {\n      var escapedParts = expectation.parts.map(function(part) {\n        return Array.isArray(part)\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n          : classEscape(part);\n      });\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n\n    any: function() {\n      return \"any character\";\n    },\n\n    end: function() {\n      return \"end of input\";\n    },\n\n    other: function(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\"/g,  \"\\\\\\\"\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\\]/g, \"\\\\]\")\n      .replace(/\\^/g, \"\\\\^\")\n      .replace(/-/g,  \"\\\\-\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  var peg$FAILED = {};\n  var peg$source = options.grammarSource;\n\n  var peg$startRuleFunctions = { dice_expr: peg$parsedice_expr };\n  var peg$startRuleFunction = peg$parsedice_expr;\n\n  var peg$c0 = \"%\";\n  var peg$c1 = \"(\";\n  var peg$c2 = \")\";\n  var peg$c3 = \"[\";\n  var peg$c4 = \"]\";\n  var peg$c5 = \",\";\n  var peg$c6 = \"&\";\n\n  var peg$r0 = /^[dD]/;\n  var peg$r1 = /^[Xx*]/;\n  var peg$r2 = /^[+\\-]/;\n  var peg$r3 = /^[#]/;\n  var peg$r4 = /^[0-9]/;\n  var peg$r5 = /^[ \\t\\n\\r]/;\n\n  var peg$e0 = peg$otherExpectation(\"dice group\");\n  var peg$e1 = peg$otherExpectation(\"dice repeat\");\n  var peg$e2 = peg$otherExpectation(\"dice n times\");\n  var peg$e3 = peg$otherExpectation(\"dice offset\");\n  var peg$e4 = peg$otherExpectation(\"dice multiplier\");\n  var peg$e5 = peg$otherExpectation(\"dice\");\n  var peg$e6 = peg$classExpectation([\"d\", \"D\"], false, false);\n  var peg$e7 = peg$literalExpectation(\"%\", false);\n  var peg$e8 = peg$literalExpectation(\"(\", false);\n  var peg$e9 = peg$literalExpectation(\")\", false);\n  var peg$e10 = peg$otherExpectation(\"list of numbers\");\n  var peg$e11 = peg$literalExpectation(\"[\", false);\n  var peg$e12 = peg$literalExpectation(\"]\", false);\n  var peg$e13 = peg$otherExpectation(\"times opearator\");\n  var peg$e14 = peg$classExpectation([\"X\", \"x\", \"*\"], false, false);\n  var peg$e15 = peg$otherExpectation(\"sign\");\n  var peg$e16 = peg$classExpectation([\"+\", \"-\"], false, false);\n  var peg$e17 = peg$otherExpectation(\"repeat\");\n  var peg$e18 = peg$classExpectation([\"#\"], false, false);\n  var peg$e19 = peg$otherExpectation(\"group seperator\");\n  var peg$e20 = peg$literalExpectation(\",\", false);\n  var peg$e21 = peg$literalExpectation(\"&\", false);\n  var peg$e22 = peg$otherExpectation(\"integers\");\n  var peg$e23 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e24 = peg$otherExpectation(\"unsigned integers\");\n  var peg$e25 = peg$otherExpectation(\"whitespace\");\n  var peg$e26 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n\n  var peg$f0 = function(head, tail) { return diceGroup(head, tail) };\n  var peg$f1 = function(n, dice) { return diceRepeat(dice, n) };\n  var peg$f2 = function(n, d) { return diceTimes(d, n) };\n  var peg$f3 = function(d, s, o) { return diceOffset(d, sign[s] * o) };\n  var peg$f4 = function(d, m) { return diceMultiplier(d, m) };\n  var peg$f5 = function(n) { return dice(n) };\n  var peg$f6 = function() { return dice(100) };\n  var peg$f7 = function(ls) { return dice(ls) };\n  var peg$f8 = function(head, tail) { return [head].concat(tail) };\n  var peg$f9 = function() { return +text() };\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function offset() {\n    return peg$savedPos;\n  }\n\n  function range() {\n    return {\n      source: peg$source,\n      start: peg$savedPos,\n      end: peg$currPos\n    };\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n\n    return {\n      source: peg$source,\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsedice_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    s2 = peg$parsedice_group();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s0 = s2;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_group() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedice_repeat();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsecomma();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsedice_repeat();\n        if (s5 !== peg$FAILED) {\n          s3 = s5;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsecomma();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsedice_repeat();\n          if (s5 !== peg$FAILED) {\n            s3 = s5;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      peg$savedPos = s0;\n      s0 = peg$f0(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedice_repeat();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseand();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsedice_repeat();\n          if (s5 !== peg$FAILED) {\n            s3 = s5;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseand();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedice_repeat();\n            if (s5 !== peg$FAILED) {\n              s3 = s5;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f0(s1, s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e0); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_repeat() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseuint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parserepeat();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedice_ntimes();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f1(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_ntimes();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e1); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_ntimes() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseuint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      s3 = peg$parsedice_offset();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f2(s1, s3);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_offset();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e2); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_offset() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedice_multiplier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsesign();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseuint();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f3(s1, s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_multiplier();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_multiplier() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedice_n();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetimes();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseuint();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f4(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_n();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e4); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_n() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (peg$r0.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e6); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseuint();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f5(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (peg$r0.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e6); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s2 = peg$c0;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e7); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f6();\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e6); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parselist_n();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f7(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c1;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e8); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedice_group();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s3 = peg$c2;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e9); }\n              }\n              if (s3 !== peg$FAILED) {\n                s0 = s2;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parselist_n() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c3;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e11); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      s3 = peg$parseint();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$parsecomma();\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parseint();\n          if (s7 !== peg$FAILED) {\n            s5 = s7;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$currPos;\n          s6 = peg$parsecomma();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseint();\n            if (s7 !== peg$FAILED) {\n              s5 = s7;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        s5 = peg$parsews();\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s6 = peg$c4;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e12); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f8(s3, s4);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e10); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetimes() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (peg$r1.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e14); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s0 = s2;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e13); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (peg$r2.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e16); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s0 = s2;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e15); }\n    }\n\n    return s0;\n  }\n\n  function peg$parserepeat() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (peg$r3.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e18); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s0 = s2;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e17); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s2 = peg$c5;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e20); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s0 = s2;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseand() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 38) {\n      s2 = peg$c6;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e21); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s0 = s2;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (peg$r2.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e16); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    s2 = [];\n    if (peg$r4.test(input.charAt(peg$currPos))) {\n      s3 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e23); }\n    }\n    if (s3 !== peg$FAILED) {\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e23); }\n        }\n      }\n    } else {\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s0 = peg$f9();\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e22); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseuint() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$r4.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e23); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e23); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f9();\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e24); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsews() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$r5.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e26); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$r5.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e26); }\n      }\n    }\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) { peg$fail(peg$e25); }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nexport {\n  peg$SyntaxError as SyntaxError,\n  peg$parse as parse\n};\n","// Generated by Peggy 1.2.0.\n//\n// https://peggyjs.org/\n\nfunction peg$subclass(child, parent) {\n  function C() { this.constructor = child; }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  var self = Error.call(this, message);\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n  }\n  self.expected = expected;\n  self.found = found;\n  self.location = location;\n  self.name = \"SyntaxError\";\n  return self;\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\nfunction peg$padEnd(str, targetLength, padString) {\n  padString = padString || \" \";\n  if (str.length > targetLength) { return str; }\n  targetLength -= str.length;\n  padString += padString.repeat(targetLength);\n  return str + padString.slice(0, targetLength);\n}\n\npeg$SyntaxError.prototype.format = function(sources) {\n  var str = \"Error: \" + this.message;\n  if (this.location) {\n    var src = null;\n    var k;\n    for (k = 0; k < sources.length; k++) {\n      if (sources[k].source === this.location.source) {\n        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n        break;\n      }\n    }\n    var s = this.location.start;\n    var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n    if (src) {\n      var e = this.location.end;\n      var filler = peg$padEnd(\"\", s.line.toString().length);\n      var line = src[s.line - 1];\n      var last = s.line === e.line ? e.column : line.length + 1;\n      str += \"\\n --> \" + loc + \"\\n\"\n          + filler + \" |\\n\"\n          + s.line + \" | \" + line + \"\\n\"\n          + filler + \" | \" + peg$padEnd(\"\", s.column - 1)\n          + peg$padEnd(\"\", last - s.column, \"^\");\n    } else {\n      str += \"\\n at \" + loc;\n    }\n  }\n  return str;\n};\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n\n    class: function(expectation) {\n      var escapedParts = expectation.parts.map(function(part) {\n        return Array.isArray(part)\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n          : classEscape(part);\n      });\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n\n    any: function() {\n      return \"any character\";\n    },\n\n    end: function() {\n      return \"end of input\";\n    },\n\n    other: function(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\"/g,  \"\\\\\\\"\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\\]/g, \"\\\\]\")\n      .replace(/\\^/g, \"\\\\^\")\n      .replace(/-/g,  \"\\\\-\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  var peg$FAILED = {};\n  var peg$source = options.grammarSource;\n\n  var peg$startRuleFunctions = { expr: peg$parseexpr };\n  var peg$startRuleFunction = peg$parseexpr;\n\n  var peg$c0 = \"=\";\n  var peg$c1 = \"false\";\n  var peg$c2 = \"null\";\n  var peg$c3 = \"true\";\n  var peg$c4 = \"[\";\n  var peg$c5 = \"{\";\n  var peg$c6 = \"(\";\n  var peg$c7 = \")\";\n  var peg$c8 = \"]\";\n  var peg$c9 = \"}\";\n  var peg$c10 = \":\";\n  var peg$c11 = \",\";\n  var peg$c12 = \".\";\n  var peg$c13 = \"-\";\n  var peg$c14 = \"+\";\n  var peg$c15 = \"0\";\n  var peg$c16 = \"\\\"\";\n  var peg$c17 = \"\\\\\";\n  var peg$c18 = \"/\";\n  var peg$c19 = \"b\";\n  var peg$c20 = \"f\";\n  var peg$c21 = \"n\";\n  var peg$c22 = \"r\";\n  var peg$c23 = \"t\";\n  var peg$c24 = \"u\";\n\n  var peg$r0 = /^[a-zA-Z\\-_$#]/;\n  var peg$r1 = /^[ \\t\\n\\r]/;\n  var peg$r2 = /^[1-9]/;\n  var peg$r3 = /^[eE]/;\n  var peg$r4 = /^[^\\0-\\x1F\"\\\\]/;\n  var peg$r5 = /^[0-9]/;\n  var peg$r6 = /^[0-9a-f]/i;\n\n  var peg$e0 = peg$otherExpectation(\"identifier\");\n  var peg$e1 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"-\", \"_\", \"$\", \"#\"], false, false);\n  var peg$e2 = peg$otherExpectation(\"assignment operator\");\n  var peg$e3 = peg$literalExpectation(\"=\", false);\n  var peg$e4 = peg$otherExpectation(\"whitespace\");\n  var peg$e5 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n  var peg$e6 = peg$literalExpectation(\"false\", false);\n  var peg$e7 = peg$literalExpectation(\"null\", false);\n  var peg$e8 = peg$literalExpectation(\"true\", false);\n  var peg$e9 = peg$literalExpectation(\"[\", false);\n  var peg$e10 = peg$literalExpectation(\"{\", false);\n  var peg$e11 = peg$literalExpectation(\"(\", false);\n  var peg$e12 = peg$literalExpectation(\")\", false);\n  var peg$e13 = peg$literalExpectation(\"]\", false);\n  var peg$e14 = peg$literalExpectation(\"}\", false);\n  var peg$e15 = peg$literalExpectation(\":\", false);\n  var peg$e16 = peg$literalExpectation(\",\", false);\n  var peg$e17 = peg$otherExpectation(\"number\");\n  var peg$e18 = peg$literalExpectation(\".\", false);\n  var peg$e19 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n  var peg$e20 = peg$classExpectation([\"e\", \"E\"], false, false);\n  var peg$e21 = peg$literalExpectation(\"-\", false);\n  var peg$e22 = peg$literalExpectation(\"+\", false);\n  var peg$e23 = peg$literalExpectation(\"0\", false);\n  var peg$e24 = peg$otherExpectation(\"string\");\n  var peg$e25 = peg$literalExpectation(\"\\\"\", false);\n  var peg$e26 = peg$literalExpectation(\"\\\\\", false);\n  var peg$e27 = peg$literalExpectation(\"/\", false);\n  var peg$e28 = peg$literalExpectation(\"b\", false);\n  var peg$e29 = peg$literalExpectation(\"f\", false);\n  var peg$e30 = peg$literalExpectation(\"n\", false);\n  var peg$e31 = peg$literalExpectation(\"r\", false);\n  var peg$e32 = peg$literalExpectation(\"t\", false);\n  var peg$e33 = peg$literalExpectation(\"u\", false);\n  var peg$e34 = peg$classExpectation([[\"\\0\", \"\\x1F\"], \"\\\"\", \"\\\\\"], true, false);\n  var peg$e35 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$e36 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"]], false, true);\n\n  var peg$f0 = function(head, tail) {\n  \t\treturn tail.reduce((a, b) => Object.assign({}, a, b), head)\n  \t};\n  var peg$f1 = function() { return {} };\n  var peg$f2 = function(k, v) { return { [k]: v } };\n  var peg$f3 = function(key) { return { [key]: true } };\n  var peg$f4 = function() { return false; };\n  var peg$f5 = function() { return null;  };\n  var peg$f6 = function() { return true;  };\n  var peg$f7 = function(head, tail) {\n          var result = {};\n\n          [head].concat(tail).forEach(function(element) {\n            result[element.name] = element.value;\n          });\n\n          return result;\n        };\n  var peg$f8 = function(members) { return members ?? {}; };\n  var peg$f9 = function(name, value) {\n        return { name: name, value: value };\n      };\n  var peg$f10 = function(head, tail) { return [head].concat(tail); };\n  var peg$f11 = function(values) { return values ?? []; };\n  var peg$f12 = function() { return parseFloat(text()); };\n  var peg$f13 = function(chars) { return chars.join(\"\"); };\n  var peg$f14 = function() { return \"\\b\"; };\n  var peg$f15 = function() { return \"\\f\"; };\n  var peg$f16 = function() { return \"\\n\"; };\n  var peg$f17 = function() { return \"\\r\"; };\n  var peg$f18 = function() { return \"\\t\"; };\n  var peg$f19 = function(digits) {\n            return String.fromCharCode(parseInt(digits, 16));\n          };\n  var peg$f20 = function(sequence) { return sequence; };\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function offset() {\n    return peg$savedPos;\n  }\n\n  function range() {\n    return {\n      source: peg$source,\n      start: peg$savedPos,\n      end: peg$currPos\n    };\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n\n    return {\n      source: peg$source,\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseexpr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebegin_paren();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsekwargs();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseend_paren();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      s2 = peg$parsekwargs();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        s0 = s2;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsekwargs() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsekv_pair();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsevalue_separator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsekv_pair();\n        if (s5 !== peg$FAILED) {\n          s3 = s5;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsevalue_separator();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsekv_pair();\n          if (s5 !== peg$FAILED) {\n            s3 = s5;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      peg$savedPos = s0;\n      s0 = peg$f0(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      peg$savedPos = s0;\n      s1 = peg$f1();\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekv_pair() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseid();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      s3 = peg$parseas();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsews();\n        s5 = peg$parsevalue();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f2(s1, s5);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseid();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseid() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$r0.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e1); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e1); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e0); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseas() {\n    var s0, s1;\n\n    peg$silentFails++;\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c0;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e3); }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e2); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsews() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$r1.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e5); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$r1.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e5); }\n      }\n    }\n    peg$silentFails--;\n    s1 = peg$FAILED;\n    if (peg$silentFails === 0) { peg$fail(peg$e4); }\n\n    return s0;\n  }\n\n  function peg$parsevalue() {\n    var s0;\n\n    s0 = peg$parsefalse();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenull();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetrue();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseobject();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsearray();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsenumber();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsestring();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefalse() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c1) {\n      s1 = peg$c1;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e6); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f4();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenull() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c2) {\n      s1 = peg$c2;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e7); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f5();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetrue() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e8); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f6();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsebegin_array() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s2 = peg$c4;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e9); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebegin_object() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s2 = peg$c5;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e10); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebegin_paren() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c6;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e11); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseend_paren() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s2 = peg$c7;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e12); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseend_array() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s2 = peg$c8;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e13); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseend_object() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 125) {\n      s2 = peg$c9;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e14); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsename_separator() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c10;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e15); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_separator() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s2 = peg$c11;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e16); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      s1 = [s1, s2, s3];\n      s0 = s1;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseobject() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebegin_object();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsemember();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$parsevalue_separator();\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parsemember();\n          if (s7 !== peg$FAILED) {\n            s5 = s7;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$currPos;\n          s6 = peg$parsevalue_separator();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemember();\n            if (s7 !== peg$FAILED) {\n              s5 = s7;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        peg$savedPos = s2;\n        s2 = peg$f7(s3, s4);\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = peg$parseend_object();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f8(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemember() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestring();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsename_separator();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f9(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebegin_array();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsevalue();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$parsevalue_separator();\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parsevalue();\n          if (s7 !== peg$FAILED) {\n            s5 = s7;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$currPos;\n          s6 = peg$parsevalue_separator();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue();\n            if (s7 !== peg$FAILED) {\n              s5 = s7;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        peg$savedPos = s2;\n        s2 = peg$f10(s3, s4);\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = peg$parseend_array();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f11(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseminus();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    s2 = peg$parseint();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsefrac();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      s4 = peg$parseexp();\n      if (s4 === peg$FAILED) {\n        s4 = null;\n      }\n      peg$savedPos = s0;\n      s0 = peg$f12();\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e17); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecimal_point() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c12;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e18); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit1_9() {\n    var s0;\n\n    if (peg$r2.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0;\n\n    if (peg$r3.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e20); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseminus();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseplus();\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = [];\n      s4 = peg$parseDIGIT();\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parseDIGIT();\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s1 = [s1, s2, s3];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecimal_point();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseDIGIT();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDIGIT();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$parsezero();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigit1_9();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDIGIT();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDIGIT();\n        }\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseminus() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s0 = peg$c13;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e21); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseplus() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c14;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e22); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsezero() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s0 = peg$c15;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e23); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestring() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsequotation_mark();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsechar();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsechar();\n      }\n      s3 = peg$parsequotation_mark();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f13(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e24); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseunescaped();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s2 = peg$c16;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e25); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 92) {\n            s2 = peg$c17;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e26); }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s2 = peg$c18;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e27); }\n            }\n            if (s2 === peg$FAILED) {\n              s2 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 98) {\n                s3 = peg$c19;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e28); }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s2;\n                s3 = peg$f14();\n              }\n              s2 = s3;\n              if (s2 === peg$FAILED) {\n                s2 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 102) {\n                  s3 = peg$c20;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e29); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s2;\n                  s3 = peg$f15();\n                }\n                s2 = s3;\n                if (s2 === peg$FAILED) {\n                  s2 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 110) {\n                    s3 = peg$c21;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e30); }\n                  }\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s2;\n                    s3 = peg$f16();\n                  }\n                  s2 = s3;\n                  if (s2 === peg$FAILED) {\n                    s2 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 114) {\n                      s3 = peg$c22;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$e31); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      peg$savedPos = s2;\n                      s3 = peg$f17();\n                    }\n                    s2 = s3;\n                    if (s2 === peg$FAILED) {\n                      s2 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 116) {\n                        s3 = peg$c23;\n                        peg$currPos++;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$e32); }\n                      }\n                      if (s3 !== peg$FAILED) {\n                        peg$savedPos = s2;\n                        s3 = peg$f18();\n                      }\n                      s2 = s3;\n                      if (s2 === peg$FAILED) {\n                        s2 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 117) {\n                          s3 = peg$c24;\n                          peg$currPos++;\n                        } else {\n                          s3 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$e33); }\n                        }\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$currPos;\n                          s5 = peg$currPos;\n                          s6 = peg$parseHEXDIG();\n                          if (s6 !== peg$FAILED) {\n                            s7 = peg$parseHEXDIG();\n                            if (s7 !== peg$FAILED) {\n                              s8 = peg$parseHEXDIG();\n                              if (s8 !== peg$FAILED) {\n                                s9 = peg$parseHEXDIG();\n                                if (s9 !== peg$FAILED) {\n                                  s6 = [s6, s7, s8, s9];\n                                  s5 = s6;\n                                } else {\n                                  peg$currPos = s5;\n                                  s5 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s5;\n                                s5 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s5;\n                              s5 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s5;\n                            s5 = peg$FAILED;\n                          }\n                          if (s5 !== peg$FAILED) {\n                            s4 = input.substring(s4, peg$currPos);\n                          } else {\n                            s4 = s5;\n                          }\n                          if (s4 !== peg$FAILED) {\n                            peg$savedPos = s2;\n                            s2 = peg$f19(s4);\n                          } else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s2;\n                          s2 = peg$FAILED;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f20(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 92) {\n      s0 = peg$c17;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e26); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequotation_mark() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s0 = peg$c16;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e25); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunescaped() {\n    var s0;\n\n    if (peg$r4.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e34); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDIGIT() {\n    var s0;\n\n    if (peg$r5.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e35); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseHEXDIG() {\n    var s0;\n\n    if (peg$r6.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e36); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nexport {\n  peg$SyntaxError as SyntaxError,\n  peg$parse as parse\n};\n"],"names":["sign","+","-","diceMultiplier","dice","m","type","multiplier","map","d","diceOffset","o","offset","diceTimes","t","times","sides","peg$SyntaxError","message","expected","found","location","self","Error","call","this","Object","setPrototypeOf","prototype","name","peg$padEnd","str","targetLength","padString","length","repeat","slice","peg$parse","input","options","peg$result","peg$FAILED","peg$source","undefined","grammarSource","peg$startRuleFunctions","dice_expr","peg$parsedice_expr","peg$startRuleFunction","peg$r0","peg$r1","peg$r2","peg$r3","peg$r4","peg$r5","peg$e0","peg$otherExpectation","peg$e1","peg$e2","peg$e3","peg$e4","peg$e5","peg$e6","peg$classExpectation","peg$e7","peg$literalExpectation","peg$e8","peg$e9","peg$e10","peg$e11","peg$e12","peg$e13","peg$e14","peg$e15","peg$e16","peg$e17","peg$e18","peg$e19","peg$e20","peg$e21","peg$e22","peg$e23","peg$e24","peg$e25","peg$e26","peg$f0","head","tail","concat","diceGroup","peg$f2","n","peg$f3","s","peg$f4","peg$f9","substring","peg$savedPos","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","text","ignoreCase","parts","inverted","description","peg$computePosDetails","pos","p","details","charCodeAt","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","source","start","end","peg$fail","push","s0","s2","peg$parsews","peg$parsedice_group","s1","s3","s5","peg$parsedice_repeat","peg$parsecomma","peg$parseand","peg$parseuint","test","charAt","peg$parserepeat","peg$parsedice_ntimes","diceRepeat","peg$f1","peg$parsedice_offset","peg$parsedice_multiplier","peg$parsesign","peg$parsedice_n","peg$parsetimes","s4","s6","s7","peg$parseint","peg$parselist_n","buildMessage","expr","peg$parseexpr","peg$c1","peg$c2","peg$c3","peg$r6","peg$e27","peg$e28","peg$e29","peg$e30","peg$e31","peg$e32","peg$e33","peg$e34","peg$e35","peg$e36","peg$f12","parseFloat","peg$parsebegin_paren","peg$parsekwargs","peg$parseend_paren","peg$parsekv_pair","peg$parsevalue_separator","reduce","a","b","assign","peg$parseid","peg$parseas","peg$parsevalue","[object Object]","substr","peg$parsefalse","peg$parsenull","peg$parsetrue","peg$parsebegin_object","peg$parsemember","result","forEach","element","value","peg$parseend_object","peg$parseobject","peg$parsebegin_array","peg$parseend_array","peg$parsearray","peg$parseminus","peg$parsezero","peg$parsedigit1_9","peg$parseDIGIT","peg$parsedecimal_point","peg$parsefrac","peg$parsee","peg$parseplus","peg$parseexp","peg$parsenumber","peg$parsestring","peg$parsename_separator","peg$parsequotation_mark","peg$parsechar","join","s8","s9","digits","peg$parseunescaped","peg$parseescape","peg$parseHEXDIG","String","fromCharCode","parseInt","child","parent","C","constructor","peg$subclass","format","sources","k","src","split","loc","e","filler","toString","last","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","class","escapedParts","part","Array","isArray","classEscape","any","other","hex","ch","toUpperCase","replace","describeExpectation","i","j","descriptions","sort","describeExpected","describeFound"],"mappings":"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"}