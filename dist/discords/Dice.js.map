{"version":3,"file":"Dice.js","sources":["../../src/dice-grammar/dice-grammar.js","../../src/kwargs-grammar/kwargs-grammar.js"],"sourcesContent":["// Generated by Peggy 1.1.0.\n//\n// https://peggyjs.org/\n\n\n    const sign = { \"+\": 1, \"-\": -1 };\n\n    function diceMultiplier(dice, m) {\n        switch (dice.type) {\n            case \"dice\":\n                return {\n                    ...dice,\n                    multiplier: m * (dice.multiplier ?? 1),\n                }\n            case \"repeat\":\n                return {\n                    ...dice,\n                    dice: diceMultiplier(dice.dice, m),\n                }\n            case \"group\":\n                return {\n                    ...dice,\n                    dice: dice.dice.map(d => diceMultiplier(d, m)),\n                }\n        }\n    }\n\n    function diceOffset(dice, o) {\n        switch (dice.type) {\n            case \"dice\":\n                return {\n                    ...dice,\n                    offset: o + (dice.offset ?? 0),\n                }\n            case \"repeat\":\n                return {\n                    ...dice,\n                    dice: diceOffset(dice.dice, o),\n                }\n            case \"group\":\n                return {\n                    ...dice,\n                    dice: dice.dice.map(d => diceOffset(d, o)),\n                }\n        }\n    }\n\n    function diceTimes(dice, t) {\n        switch (dice.type) {\n            case \"dice\":\n                return {\n                    ...dice,\n                    times: t * (dice.times ?? 1),\n                };\n            case \"repeat\":\n                return {\n                    ...dice,\n                    dice: diceTimes(dice.dice, t),\n                }\n            case \"group\":\n                return {\n                    ...dice,\n                    dice: dice.dice.map(d => diceTimes(d, t)),\n                }\n        }\n    }\n\n    function diceRepeat(dice, times) {\n        return {\n            type: \"repeat\",\n            times,\n            dice,\n        }\n    }\n\n    function diceGroup(head, tail) {\n        if (tail.length) return {\n            type: \"group\",\n            dice: [head].concat(tail),\n        }\n        return head;\n    }\n\n    function dice(sides) {\n        return {\n            type: \"dice\",\n            sides,\n        }\n    }\n\n\nfunction peg$subclass(child, parent) {\n  function C() { this.constructor = child; }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n\n    class: function(expectation) {\n      var escapedParts = expectation.parts.map(function(part) {\n        return Array.isArray(part)\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n          : classEscape(part);\n      });\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n\n    any: function() {\n      return \"any character\";\n    },\n\n    end: function() {\n      return \"end of input\";\n    },\n\n    other: function(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\"/g,  \"\\\\\\\"\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\\]/g, \"\\\\]\")\n      .replace(/\\^/g, \"\\\\^\")\n      .replace(/-/g,  \"\\\\-\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  var peg$FAILED = {};\n\n  var peg$startRuleFunctions = { dice_expr: peg$parsedice_expr };\n  var peg$startRuleFunction = peg$parsedice_expr;\n\n  var peg$c0 = peg$otherExpectation(\"dice group\");\n  var peg$c1 = function(head, tail) { return diceGroup(head, tail) };\n  var peg$c2 = peg$otherExpectation(\"dice repeat\");\n  var peg$c3 = function(n, dice) { return diceRepeat(dice, n) };\n  var peg$c4 = peg$otherExpectation(\"dice n times\");\n  var peg$c5 = function(n, d) { return diceTimes(d, n) };\n  var peg$c6 = peg$otherExpectation(\"dice offset\");\n  var peg$c7 = function(d, s, o) { return diceOffset(d, sign[s] * o) };\n  var peg$c8 = peg$otherExpectation(\"dice multiplier\");\n  var peg$c9 = function(d, m) { return diceMultiplier(d, m) };\n  var peg$c10 = peg$otherExpectation(\"dice\");\n  var peg$c11 = /^[dD]/;\n  var peg$c12 = peg$classExpectation([\"d\", \"D\"], false, false);\n  var peg$c13 = function(n) { return dice(n) };\n  var peg$c14 = \"%\";\n  var peg$c15 = peg$literalExpectation(\"%\", false);\n  var peg$c16 = function() { return dice(100) };\n  var peg$c17 = function(ls) { return dice(ls) };\n  var peg$c18 = \"(\";\n  var peg$c19 = peg$literalExpectation(\"(\", false);\n  var peg$c20 = \")\";\n  var peg$c21 = peg$literalExpectation(\")\", false);\n  var peg$c22 = peg$otherExpectation(\"list of numbers\");\n  var peg$c23 = \"[\";\n  var peg$c24 = peg$literalExpectation(\"[\", false);\n  var peg$c25 = \"]\";\n  var peg$c26 = peg$literalExpectation(\"]\", false);\n  var peg$c27 = function(head, tail) { return [head].concat(tail) };\n  var peg$c28 = peg$otherExpectation(\"times opearator\");\n  var peg$c29 = /^[Xx*]/;\n  var peg$c30 = peg$classExpectation([\"X\", \"x\", \"*\"], false, false);\n  var peg$c31 = peg$otherExpectation(\"sign\");\n  var peg$c32 = /^[+\\-]/;\n  var peg$c33 = peg$classExpectation([\"+\", \"-\"], false, false);\n  var peg$c34 = peg$otherExpectation(\"repeat\");\n  var peg$c35 = /^[#]/;\n  var peg$c36 = peg$classExpectation([\"#\"], false, false);\n  var peg$c37 = peg$otherExpectation(\"group seperator\");\n  var peg$c38 = \",\";\n  var peg$c39 = peg$literalExpectation(\",\", false);\n  var peg$c40 = \"&\";\n  var peg$c41 = peg$literalExpectation(\"&\", false);\n  var peg$c42 = peg$otherExpectation(\"integers\");\n  var peg$c43 = /^[0-9]/;\n  var peg$c44 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$c45 = function() { return +text() };\n  var peg$c46 = peg$otherExpectation(\"unsigned integers\");\n  var peg$c47 = peg$otherExpectation(\"whitespace\");\n  var peg$c48 = /^[ \\t\\n\\r]/;\n  var peg$c49 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsedice_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedice_group();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_group() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedice_repeat();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsecomma();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsedice_repeat();\n        if (s5 !== peg$FAILED) {\n          s3 = s5;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsecomma();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsedice_repeat();\n          if (s5 !== peg$FAILED) {\n            s3 = s5;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedice_repeat();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseand();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsedice_repeat();\n          if (s5 !== peg$FAILED) {\n            s3 = s5;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseand();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedice_repeat();\n            if (s5 !== peg$FAILED) {\n              s3 = s5;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c0); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_repeat() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseuint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parserepeat();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedice_ntimes();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_ntimes();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c2); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_ntimes() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseuint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedice_offset();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c5(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_offset();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_offset() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedice_multiplier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsesign();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseuint();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c7(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_multiplier();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c6); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_multiplier() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedice_n();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetimes();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseuint();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c9(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedice_n();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c8); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedice_n() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (peg$c11.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c12); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseuint();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (peg$c11.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s2 = peg$c14;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c16();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (peg$c11.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parselist_n();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c18;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedice_group();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s3 = peg$c20;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c21); }\n              }\n              if (s3 !== peg$FAILED) {\n                s0 = s2;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n\n    return s0;\n  }\n\n  function peg$parselist_n() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c23;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c24); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseint();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parsecomma();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseint();\n            if (s7 !== peg$FAILED) {\n              s5 = s7;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parsecomma();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseint();\n              if (s7 !== peg$FAILED) {\n                s5 = s7;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsews();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s6 = peg$c25;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c26); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetimes() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (peg$c29.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c30); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (peg$c32.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c33); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n\n    return s0;\n  }\n\n  function peg$parserepeat() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (peg$c35.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s2 = peg$c38;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseand() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 38) {\n        s2 = peg$c40;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (peg$c32.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c43.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c43.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c44); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c45();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseuint() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c43.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c44); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c43.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c45();\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c46); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsews() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$c48.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c49); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c47); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nexport {\n  peg$SyntaxError as SyntaxError,\n  peg$parse as parse\n};\n","// Generated by Peggy 1.1.0.\n//\n// https://peggyjs.org/\n\nfunction peg$subclass(child, parent) {\n  function C() { this.constructor = child; }\n  C.prototype = parent.prototype;\n  child.prototype = new C();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n\n    class: function(expectation) {\n      var escapedParts = expectation.parts.map(function(part) {\n        return Array.isArray(part)\n          ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n          : classEscape(part);\n      });\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n\n    any: function() {\n      return \"any character\";\n    },\n\n    end: function() {\n      return \"end of input\";\n    },\n\n    other: function(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\"/g,  \"\\\\\\\"\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, \"\\\\\\\\\")\n      .replace(/\\]/g, \"\\\\]\")\n      .replace(/\\^/g, \"\\\\^\")\n      .replace(/-/g,  \"\\\\-\")\n      .replace(/\\0/g, \"\\\\0\")\n      .replace(/\\t/g, \"\\\\t\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\r/g, \"\\\\r\")\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \"\\\\x0\" + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \"\\\\x\"  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = expected.map(describeExpectation);\n    var i, j;\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  var peg$FAILED = {};\n\n  var peg$startRuleFunctions = { expr: peg$parseexpr };\n  var peg$startRuleFunction = peg$parseexpr;\n\n  var peg$c0 = function(head, tail) {\n  \t\treturn tail.reduce((a, b) => Object.assign({}, a, b), head)\n  \t};\n  var peg$c1 = function() { return {} };\n  var peg$c2 = function(k, v) { return { [k]: v } };\n  var peg$c3 = function(key) { return { [key]: true } };\n  var peg$c4 = peg$otherExpectation(\"identifier\");\n  var peg$c5 = /^[a-zA-Z\\-_$#]/;\n  var peg$c6 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"-\", \"_\", \"$\", \"#\"], false, false);\n  var peg$c7 = peg$otherExpectation(\"assignment operator\");\n  var peg$c8 = \"=\";\n  var peg$c9 = peg$literalExpectation(\"=\", false);\n  var peg$c10 = peg$otherExpectation(\"whitespace\");\n  var peg$c11 = /^[ \\t\\n\\r]/;\n  var peg$c12 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n  var peg$c13 = \"false\";\n  var peg$c14 = peg$literalExpectation(\"false\", false);\n  var peg$c15 = function() { return false; };\n  var peg$c16 = \"null\";\n  var peg$c17 = peg$literalExpectation(\"null\", false);\n  var peg$c18 = function() { return null;  };\n  var peg$c19 = \"true\";\n  var peg$c20 = peg$literalExpectation(\"true\", false);\n  var peg$c21 = function() { return true;  };\n  var peg$c22 = \"[\";\n  var peg$c23 = peg$literalExpectation(\"[\", false);\n  var peg$c24 = \"{\";\n  var peg$c25 = peg$literalExpectation(\"{\", false);\n  var peg$c26 = \"(\";\n  var peg$c27 = peg$literalExpectation(\"(\", false);\n  var peg$c28 = \")\";\n  var peg$c29 = peg$literalExpectation(\")\", false);\n  var peg$c30 = \"]\";\n  var peg$c31 = peg$literalExpectation(\"]\", false);\n  var peg$c32 = \"}\";\n  var peg$c33 = peg$literalExpectation(\"}\", false);\n  var peg$c34 = \":\";\n  var peg$c35 = peg$literalExpectation(\":\", false);\n  var peg$c36 = \",\";\n  var peg$c37 = peg$literalExpectation(\",\", false);\n  var peg$c38 = function(head, tail) {\n          var result = {};\n\n          [head].concat(tail).forEach(function(element) {\n            result[element.name] = element.value;\n          });\n\n          return result;\n        };\n  var peg$c39 = function(members) { return members ?? {}; };\n  var peg$c40 = function(name, value) {\n        return { name: name, value: value };\n      };\n  var peg$c41 = function(head, tail) { return [head].concat(tail); };\n  var peg$c42 = function(values) { return values ?? []; };\n  var peg$c43 = peg$otherExpectation(\"number\");\n  var peg$c44 = function() { return parseFloat(text()); };\n  var peg$c45 = \".\";\n  var peg$c46 = peg$literalExpectation(\".\", false);\n  var peg$c47 = /^[1-9]/;\n  var peg$c48 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n  var peg$c49 = /^[eE]/;\n  var peg$c50 = peg$classExpectation([\"e\", \"E\"], false, false);\n  var peg$c51 = \"-\";\n  var peg$c52 = peg$literalExpectation(\"-\", false);\n  var peg$c53 = \"+\";\n  var peg$c54 = peg$literalExpectation(\"+\", false);\n  var peg$c55 = \"0\";\n  var peg$c56 = peg$literalExpectation(\"0\", false);\n  var peg$c57 = peg$otherExpectation(\"string\");\n  var peg$c58 = function(chars) { return chars.join(\"\"); };\n  var peg$c59 = \"\\\"\";\n  var peg$c60 = peg$literalExpectation(\"\\\"\", false);\n  var peg$c61 = \"\\\\\";\n  var peg$c62 = peg$literalExpectation(\"\\\\\", false);\n  var peg$c63 = \"/\";\n  var peg$c64 = peg$literalExpectation(\"/\", false);\n  var peg$c65 = \"b\";\n  var peg$c66 = peg$literalExpectation(\"b\", false);\n  var peg$c67 = function() { return \"\\b\"; };\n  var peg$c68 = \"f\";\n  var peg$c69 = peg$literalExpectation(\"f\", false);\n  var peg$c70 = function() { return \"\\f\"; };\n  var peg$c71 = \"n\";\n  var peg$c72 = peg$literalExpectation(\"n\", false);\n  var peg$c73 = function() { return \"\\n\"; };\n  var peg$c74 = \"r\";\n  var peg$c75 = peg$literalExpectation(\"r\", false);\n  var peg$c76 = function() { return \"\\r\"; };\n  var peg$c77 = \"t\";\n  var peg$c78 = peg$literalExpectation(\"t\", false);\n  var peg$c79 = function() { return \"\\t\"; };\n  var peg$c80 = \"u\";\n  var peg$c81 = peg$literalExpectation(\"u\", false);\n  var peg$c82 = function(digits) {\n            return String.fromCharCode(parseInt(digits, 16));\n          };\n  var peg$c83 = function(sequence) { return sequence; };\n  var peg$c84 = /^[^\\0-\\x1F\"\\\\]/;\n  var peg$c85 = peg$classExpectation([[\"\\0\", \"\\x1F\"], \"\\\"\", \"\\\\\"], true, false);\n  var peg$c86 = /^[0-9]/;\n  var peg$c87 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  var peg$c88 = /^[0-9a-f]/i;\n  var peg$c89 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"]], false, true);\n\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{ line: 1, column: 1 }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n\n  var peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseexpr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebegin_paren();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsekwargs();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseend_paren();\n        if (s3 !== peg$FAILED) {\n          s0 = s2;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsekwargs();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s0 = s2;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsekwargs() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsekv_pair();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsevalue_separator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsekv_pair();\n        if (s5 !== peg$FAILED) {\n          s3 = s5;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsevalue_separator();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsekv_pair();\n          if (s5 !== peg$FAILED) {\n            s3 = s5;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekv_pair() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseid();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevalue();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c2(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseid();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c3(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseid() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c5.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c6); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c5.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseas() {\n    var s0, s1;\n\n    peg$silentFails++;\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c8;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c9); }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsews() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$c11.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c12); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c11.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue() {\n    var s0;\n\n    s0 = peg$parsefalse();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenull();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetrue();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseobject();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsearray();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsenumber();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsestring();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefalse() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c13) {\n      s1 = peg$c13;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c14); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c15();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenull() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c16) {\n      s1 = peg$c16;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c17); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c18();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetrue() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c19) {\n      s1 = peg$c19;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c20); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c21();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsebegin_array() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c22;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebegin_object() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s2 = peg$c24;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebegin_paren() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c26;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseend_paren() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 41) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseend_array() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 93) {\n        s2 = peg$c30;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseend_object() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 125) {\n        s2 = peg$c32;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c33); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsename_separator() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s2 = peg$c34;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_separator() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s2 = peg$c36;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseobject() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebegin_object();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsemember();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$parsevalue_separator();\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parsemember();\n          if (s7 !== peg$FAILED) {\n            s5 = s7;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$currPos;\n          s6 = peg$parsevalue_separator();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemember();\n            if (s7 !== peg$FAILED) {\n              s5 = s7;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c38(s3, s4);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseend_object();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemember() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestring();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsename_separator();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c40(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebegin_array();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsevalue();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$parsevalue_separator();\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parsevalue();\n          if (s7 !== peg$FAILED) {\n            s5 = s7;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$currPos;\n          s6 = peg$parsevalue_separator();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue();\n            if (s7 !== peg$FAILED) {\n              s5 = s7;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c41(s3, s4);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseend_array();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c42(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3, s4;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseminus();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseint();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsefrac();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexp();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c44();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecimal_point() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c45;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c46); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit1_9() {\n    var s0;\n\n    if (peg$c47.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c48); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0;\n\n    if (peg$c49.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c50); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseminus();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseplus();\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parseDIGIT();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseDIGIT();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecimal_point();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseDIGIT();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDIGIT();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$parsezero();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigit1_9();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDIGIT();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDIGIT();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseminus() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s0 = peg$c51;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c52); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseplus() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c53;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c54); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsezero() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s0 = peg$c55;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c56); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestring() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsequotation_mark();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsechar();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsechar();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsequotation_mark();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c57); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseunescaped();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseescape();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s2 = peg$c59;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c60); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 92) {\n            s2 = peg$c61;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c62); }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s2 = peg$c63;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c64); }\n            }\n            if (s2 === peg$FAILED) {\n              s2 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 98) {\n                s3 = peg$c65;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c66); }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s2;\n                s3 = peg$c67();\n              }\n              s2 = s3;\n              if (s2 === peg$FAILED) {\n                s2 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 102) {\n                  s3 = peg$c68;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c69); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s2;\n                  s3 = peg$c70();\n                }\n                s2 = s3;\n                if (s2 === peg$FAILED) {\n                  s2 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 110) {\n                    s3 = peg$c71;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                  }\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s2;\n                    s3 = peg$c73();\n                  }\n                  s2 = s3;\n                  if (s2 === peg$FAILED) {\n                    s2 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 114) {\n                      s3 = peg$c74;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c75); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      peg$savedPos = s2;\n                      s3 = peg$c76();\n                    }\n                    s2 = s3;\n                    if (s2 === peg$FAILED) {\n                      s2 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 116) {\n                        s3 = peg$c77;\n                        peg$currPos++;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c78); }\n                      }\n                      if (s3 !== peg$FAILED) {\n                        peg$savedPos = s2;\n                        s3 = peg$c79();\n                      }\n                      s2 = s3;\n                      if (s2 === peg$FAILED) {\n                        s2 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 117) {\n                          s3 = peg$c80;\n                          peg$currPos++;\n                        } else {\n                          s3 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                        }\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$currPos;\n                          s5 = peg$currPos;\n                          s6 = peg$parseHEXDIG();\n                          if (s6 !== peg$FAILED) {\n                            s7 = peg$parseHEXDIG();\n                            if (s7 !== peg$FAILED) {\n                              s8 = peg$parseHEXDIG();\n                              if (s8 !== peg$FAILED) {\n                                s9 = peg$parseHEXDIG();\n                                if (s9 !== peg$FAILED) {\n                                  s6 = [s6, s7, s8, s9];\n                                  s5 = s6;\n                                } else {\n                                  peg$currPos = s5;\n                                  s5 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s5;\n                                s5 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s5;\n                              s5 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s5;\n                            s5 = peg$FAILED;\n                          }\n                          if (s5 !== peg$FAILED) {\n                            s4 = input.substring(s4, peg$currPos);\n                          } else {\n                            s4 = s5;\n                          }\n                          if (s4 !== peg$FAILED) {\n                            peg$savedPos = s2;\n                            s3 = peg$c82(s4);\n                            s2 = s3;\n                          } else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s2;\n                          s2 = peg$FAILED;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c83(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 92) {\n      s0 = peg$c61;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequotation_mark() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s0 = peg$c59;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c60); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunescaped() {\n    var s0;\n\n    if (peg$c84.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c85); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDIGIT() {\n    var s0;\n\n    if (peg$c86.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c87); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseHEXDIG() {\n    var s0;\n\n    if (peg$c88.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c89); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nexport {\n  peg$SyntaxError as SyntaxError,\n  peg$parse as parse\n};\n"],"names":["sign","+","-","diceMultiplier","dice","m","type","multiplier","map","d","diceOffset","o","offset","diceTimes","t","times","sides","peg$SyntaxError","message","expected","found","location","this","name","Error","captureStackTrace","peg$parse","input","options","undefined","peg$result","peg$FAILED","peg$startRuleFunctions","dice_expr","peg$parsedice_expr","peg$startRuleFunction","peg$c0","peg$otherExpectation","peg$c1","head","tail","length","concat","diceGroup","peg$c2","peg$c4","peg$c5","n","peg$c6","peg$c7","s","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$classExpectation","peg$c15","peg$literalExpectation","peg$c19","peg$c21","peg$c22","peg$c24","peg$c26","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c39","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","substring","peg$savedPos","peg$currPos","peg$c46","peg$c47","peg$c48","peg$c49","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","text","ignoreCase","parts","inverted","description","peg$computePosDetails","pos","p","details","charCodeAt","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","end","peg$fail","push","s0","s2","peg$parsews","peg$parsedice_group","s1","s3","s5","peg$parsedice_repeat","peg$parsecomma","peg$parseand","peg$parseuint","test","charAt","peg$parserepeat","peg$parsedice_ntimes","diceRepeat","peg$c3","peg$parsedice_offset","peg$parsedice_multiplier","peg$parsesign","peg$parsedice_n","peg$parsetimes","s4","s6","s7","peg$parseint","peg$parselist_n","buildMessage","expr","peg$parseexpr","peg$c13","peg$c14","peg$c16","peg$c17","peg$c20","peg$c23","peg$c25","peg$c27","parseFloat","peg$c50","peg$c52","peg$c54","peg$c56","peg$c57","peg$c60","peg$c62","peg$c64","peg$c66","peg$c69","peg$c72","peg$c75","peg$c78","peg$c81","peg$c84","peg$c85","peg$c86","peg$c87","peg$c88","peg$c89","peg$parsebegin_paren","peg$parsekwargs","peg$parseend_paren","peg$parsekv_pair","peg$parsevalue_separator","reduce","a","b","Object","assign","peg$parseid","peg$parseas","peg$parsevalue","[object Object]","substr","peg$parsefalse","peg$parsenull","peg$parsetrue","peg$parsebegin_object","peg$parsemember","result","forEach","element","value","peg$parseend_object","peg$parseobject","peg$parsebegin_array","peg$parseend_array","peg$parsearray","peg$parseminus","peg$parsezero","peg$parsedigit1_9","peg$parseDIGIT","peg$parsedecimal_point","peg$parsefrac","peg$parsee","peg$parseplus","peg$parseexp","peg$parsenumber","peg$parsestring","peg$parsename_separator","peg$parsequotation_mark","peg$parsechar","join","s8","s9","digits","peg$parseunescaped","peg$parseescape","peg$parseHEXDIG","String","fromCharCode","parseInt","child","parent","C","constructor","prototype","peg$subclass","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","class","escapedParts","part","Array","isArray","classEscape","any","other","hex","ch","toString","toUpperCase","replace","describeExpectation","i","j","descriptions","sort","slice","describeExpected","describeFound"],"mappings":"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"}